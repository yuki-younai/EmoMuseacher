/*!
 * console 0.6.0 (https://github.com/jsmini/console)
 * API https://github.com/jsmini/console/blob/master/doc/api.md
 * Copyright 2013-2018 yanhaijing. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/console/blob/master/LICENSE)
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.jsmini_console = {})));
}(this, (function (exports) { 'use strict';

var apply = Function.prototype.apply;

function polyfill() {
    var g = typeof window !== 'undefined' ? window : {};

    var _console = g.console || {};
    var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'exception', 'error', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];

    var console = {};

    var _loop = function _loop(i) {
        var key = methods[i];
        console[key] = function () {
            if (typeof _console[key] === 'undefined') {
                return;
            }
            // 添加容错处理
            try {
                return apply.call(_console[key], _console, arguments);
            } catch (e) {}
        };
    };

    for (var i = 0; i < methods.length; i++) {
        _loop(i);
    }

    g.console = console;
}

function safeExec(cmd) {
    try {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        return apply.call(console[cmd], console, args);
    } catch (e) {}
}
function log() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
    }

    return safeExec.apply(undefined, ['log'].concat(args));
}

function info() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
    }

    return safeExec.apply(undefined, ['info'].concat(args));
}

function warn() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
    }

    return safeExec.apply(undefined, ['warn'].concat(args));
}

function error() {
    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
    }

    return safeExec.apply(undefined, ['error'].concat(args));
}

function log1(msg) {
    try {
        return console.log('log:', msg);
    } catch (e) {}
}

function warn1(msg) {
    try {
        return console.warn('warn:', msg);
    } catch (e) {}
}

function error1(msg) {
    try {
        return console.error('error:', msg);
    } catch (e) {}
}

exports.polyfill = polyfill;
exports.safeExec = safeExec;
exports.log = log;
exports.info = info;
exports.warn = warn;
exports.error = error;
exports.log1 = log1;
exports.warn1 = warn1;
exports.error1 = error1;

})));
