/*!
 * event 0.5.1 (https://github.com/jsmini/event)
 * API https://github.com/jsmini/event/blob/master/doc/api.md
 * Copyright 2017-2018 yanhaijing. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/event/blob/master/LICENSE)
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.jsmini_event = {})));
}(this, (function (exports) { 'use strict';

/*!
 * type 0.4.0 (https://github.com/jsmini/type)
 * API https://github.com/jsmini/type/blob/master/doc/api.md
 * Copyright 2017-2018 jsmini. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/type/blob/master/LICENSE)
 */

const toString = Object.prototype.toString;

function type(x) {
    if(x === null){
        return 'null';
    }

    const t= typeof x;

    if(t !== 'object'){
        return t;
    }

    let c;
    try {
        c = toString.call(x).slice(8, -1).toLowerCase();
    } catch(exp) {
        return 'object';
    }

    if(c !== 'object'){
        return c;
    }

    if(x.constructor == Object){
        return c;
    }

    return 'unknown';
}

/*!
 * is 0.4.0 (https://github.com/jsmini/is)
 * API https://github.com/jsmini/is/blob/master/doc/api.md
 * Copyright 2017-2018 yanhaijing. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/is/blob/master/LICENSE)
 */

function isUndefined(x) {
    return type(x) === 'undefined';
}

function isFunction(x) {
    return type(x) === 'function';
}

const isArray = isFunction(Array.isArray) ? Array.isArray : function isArray(x) {
    return type(x) === 'array';
};

function EventEmitter() {
    this.eventMap = {};
}

EventEmitter.prototype.addListener = function addListener(eventName, listener) {
    if (!isFunction(listener)) {
        throw new TypeError('addListener second param must is function');
    }

    this.eventMap[eventName] = this.eventMap[eventName] || [];

    this.eventMap[eventName].push(listener);

    return this;
};

EventEmitter.prototype.on = function on(eventName, listener) {
    return this.addListener(eventName, listener);
};

EventEmitter.prototype.once = function once(eventName, listener) {
    var _this = this;

    if (!isFunction(listener)) {
        throw new TypeError('once second param must is function');
    }

    var fn = function fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        _this.removeListener(eventName, fn);
        listener.apply(_this, args);
    };

    fn.eventjsListener = listener;

    return this.addListener(eventName, fn);
};

EventEmitter.prototype.removeListener = function removeListener(eventName, listener) {
    if (!isFunction(listener)) {
        throw new TypeError('removeListener second param must is function');
    }

    var listeners = void 0;

    if (!(listeners = this.eventMap[eventName])) {
        return this;
    }

    for (var i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener || listeners[i].eventjsListener === listener) {
            listeners.splice(i, 1);
            break; // 同一个函数多次绑定，每次只移除一个
        }
    }

    if (listeners.length === 0) {
        delete this.eventMap[eventName];
    }

    return this;
};

EventEmitter.prototype.off = function off(eventName, listener) {
    return this.removeListener(eventName, listener);
};

EventEmitter.prototype.removeAllListeners = function removeAllListeners(eventName) {
    if (isUndefined(eventName)) {
        this.eventMap = {};
        return this;
    }

    delete this.eventMap[eventName];

    return this;
};

EventEmitter.prototype.emit = function emit(eventName) {
    var listeners = void 0;

    if (!(listeners = this.eventMap[eventName])) {
        return this;
    }

    // 锁死队列，避免无限循环
    listeners = listeners.slice();

    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
    }

    for (var i = 0; i < listeners.length; i++) {
        listeners[i].apply(this, args);
    }

    return this;
};

EventEmitter.prototype.listeners = function listeners(eventName) {
    return (this.eventMap[eventName] || []).slice();
};

var eventCenter = new EventEmitter();

exports.EventEmitter = EventEmitter;
exports.eventCenter = eventCenter;

})));
